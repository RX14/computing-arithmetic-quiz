doctype html
html
  head
    title Arithmetic Quiz - Writeup

    link rel="stylesheet" href="https://cdn.rawgit.com/sindresorhus/github-markdown-css/4cac7ec8c60d942e3bbc5327a397557ac4b3cda3/github-markdown.css"
    /script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"

    link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/styles/tomorrow-night-bright.min.css"
    script src="highlight.pack.js"
    script hljs.initHighlightingOnLoad();
    css:
      /* Table stuff */
      table, th, td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
      }

      table {
        table-layout: fixed;
        width: calc(100% + 16px);
        margin-left: -8px;
        margin-right: -8px;
        border-collapse: collapse;
      }

      tr > td {
        width: 50%;
      }

      tr > td:nth-of-type(1) {
        padding: 15px;
      }

      tr > td:nth-of-type(2) {
        background: black;
      }

  body
    .markdown-body
      markdown:
        Arithmetic Quiz - Writeup
        =========================

        Task 1
        ------
        > A primary school teacher wants a computer program to test the basic arithmetic skills of her students.
        > The program should generate a quiz consisting of a series of random questions, using in each case any two
        > numbers and addition, subtraction and multiplication. The system should ask the student's name, then ask 10
        > questions, output if the answer to each question is correct or not and produce a final score out of 10.

        ### Success Criteria:
        - It must be able to generate a quiz containing 10 questions. In order to properly test the students in
          consecutive quizzes, the program should generate random questions instead of using a reset 10 questions every
          time.
        - The system must be able to ask the students name.
        - It must then show these questions to the student in a human-readable format so that the students can
          understand what the program is asking them to solve.
        - The student should be able to enter an answer to the question.
        - The program should store the answers given so that a score can be given at the end of the quiz.

        After I have written the code I will test that the program performs as expected against these success criteria.

        ### Design
        I have made a flow chart to show the high level structure of the program I will be writing.
        <img src="flowchart1.png" height="1000" style="display: block; margin-left: auto; margin-right: auto" />

        Alternately, I could have made the program ask a question then ask an answer, but I believe this solution to be
        better suited to the medium which I have chosen to deliver this program on: the web.

        ### Implementation
        I have chosen to write this program as a web application instead of a commandline application for several
        reasons:

        - It is easier for the students to access the program.
        - It is possible for multiple students to use the program at the same time.
        - I want to challenge myself.

        Web pages are served in a language called HTML which describes the content of the page and how to display it.
        HTML however is not a programming language because while it does provide a way of collecting user input, it
        does not provide any way of using logic. Because of this limitation, I will have to write a program which
        generates HTML and receives the user input from HTML.

        I have chosen to write the program which generated the HTML in a programming language called ruby because I am
        familiar with the language from previous projects and it has many tools already available for helping generate
        and server webpages.

        In particular I will be using a web framework called "padrino" to help me write the web application. The padrino
        framework allows me to write in terms of models, views and controllers.

        - Models represent the core data format of an application, in our case 'quiz' and 'student'.
        - Views take the data stored in a model and display it to the student.
        - Models take requests from the user and perform alterations to the model.

        Before I show you my code, I need to make some basic explanations about some of the non-obvious rules and syntax
        of the ruby programming language:

        - Sections starting with `do` and finishing with `end` or using curly braces are blocks. They specify their
          arguments like functions but use the syntax `|arg1, arg2|`
          <pre><code class="nohighlight">[ "one", "two" ].each do |element|
              puts element # Puts is ruby's "print" statement
          end
          </code></pre>
          This would produce the output
          <pre><code class="nohighlight">one
          two
          </code></pre>
        - Functions can have the parenteses around the arguments left off where
          <pre><code class="nohighlight">function(arg1, arg2)</code></pre>
          is the same as
          <pre><code class="nohighlight">function arg1, arg2</code></pre>
        - The last line of a function is the return value.
          <pre><code class="nohighlight">def name
              return firstname + " " + lastname
            end
          </code></pre>
          is the same as
          <pre><code class="nohighlight">def name
              firstname + " " + lastname
          end
          </code></pre>

        I will show you my code on the right with brief explanations on the left.

        Models
        ---------------------
        ### Student
    table
      tr
        td.markdown-body
          markdown:
            We are creating a model.
        td
          pre
            code class="ruby"
              | class Student < Sequel::Model
      tr
        td.markdown-body
          markdown:
            There is one student to many quizzes. This is a helper that defines things such as `student.quizzes` and
            `student.add_quiz`
        td
          pre
            code class="ruby"
              |     one_to_many :quizzes
      tr
        td.markdown-body
          markdown:
            The student's name is their firstname and lastname concatenated with a space.

        td
          pre
            code class="ruby"
              |     def name
                        firstname + " " + lastname
                    end
      tr
        td.markdown-body
          markdown:
            Returns an array of the quizzes which are finished.

        td
          pre
            code class="ruby"
              |     def completed_quizzes
                        quizzes.select(&:finished)
                    end
      tr
        td
          .markdown-body
            markdown:
              Finds the student's average score. Uses only completed quizzes because non-completed quizzes have no score.
              Reduce is a function which iterates through every completed quiz, setting `e` to the current element and `a`
              (accumulator) to the value returned from the previous element. The `0.0` specifies the first value for the
              accumulator. The last line is basically a shortened version of this code:
          pre
            code class="ruby"
              | accumulator = 0.0
                completed_quizzes.each do |quiz|
                    accumulator = accumulator + quiz.score.to_i
                end
                return accumulator / quizzes.size
          .markdown-body
            markdown:
              This adds all the scores together and divides them by the number of quizzes which we all know is how we
              get an average!
        td
          pre
            code class="ruby"
              |     def average_score
                        return if completed_quizzes.empty?

                        completed_quizzes.reduce(0.0) { |a, e| a + e.score.to_i } / quizzes.size
                    end
      tr
        td.markdown-body
          markdown:
            Takes the completed quiz with the highest score and gets it's score.
        td
          pre
            code class="ruby"
              |     def highest_score
                        return if completed_quizzes.empty?

                        completed_quizzes.max_by(&:score).score
                    end
      tr
        td
        td
          pre
            code class="ruby"
              | end

    h2 Templates
    table width="100%"
      tr
        td
        td
          pre
            code class="slim"
              | doctype html
                html
                  head
                    title = "Arithmetic Quiz - " + @title

                    = stylesheet_link_tag "application", "bootstrap"
                    = javascript_include_tag "jquery", "bootstrap", "application"

                    meta name="viewport" content="width=device-width, initial-scale=1"

                  body
                    #content
                      .container
                        .page-header
                          h1 = @title
                        == yield

                    footer
                      .container
                        p.text-muted.text-center
                          | Project made by RX14 for the Computing GCSE "Arithmetic Quiz" task
