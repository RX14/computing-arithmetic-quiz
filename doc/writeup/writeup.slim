doctype html
html
  head
    title Arithmetic Quiz - Writeup

    /link rel="stylesheet" href="https://cdn.rawgit.com/sindresorhus/github-markdown-css/4cac7ec8c60d942e3bbc5327a397557ac4b3cda3/github-markdown.css"
    link rel="stylesheet" href="assets/css/github-markdown.css"
    /script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"

    /link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.5/styles/tomorrow-night-bright.min.css"
    link rel="stylesheet" href="assets/css/tomorrow-night-bright.css"
    script src="assets/js/highlight.pack.js"
    script hljs.initHighlightingOnLoad();
    css:
      /* Table stuff */
      table, th, td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
      }

      table {
        table-layout: fixed;
        width: calc(100% + 16px);
        margin-left: -8px;
        margin-right: -8px;
        border-collapse: collapse;
      }

      tr > td {
        width: 50%;
      }

      tr > td:nth-of-type(1) {
        padding: 15px;
      }

      tr > td:nth-of-type(2) {
        background: black;
      }

  body
    .markdown-body
      markdown:
        Arithmetic Quiz - Writeup
        =========================

        Task 1 and 2
        ------------
        > #####Task 1
        > A primary school teacher wants a computer program to test the basic arithmetic skills of her students.
        > The program should generate a quiz consisting of a series of random questions, using in each case any two
        > numbers and addition, subtraction and multiplication. The system should ask the student's name, then ask 10
        > questions, output if the answer to each question is correct or not and produce a final score out of 10.

        > #####Task 2
        > The teacher wants to keep track of the scores each member of the class contains in the quiz. There are three
        > classes in the school and the data should be kept separately for each class.

        ### Success Criteria:
        - It must be able to generate a quiz containing 10 questions. In order to properly test the students in
          consecutive quizzes, the program should generate random questions instead of using a preset 10 questions
          every time.
        - The system must be able to ask the students name and class.
        - It must then show these questions to the student in a human-readable format so that the students can
          understand what the program is asking them to solve.
        - The student should be able to enter an answer to the question.
        - The program should give a score at the end of the quiz.
        - The program should also save the results of the quiz, and the name and class of the student.

        After I have written the code I will test that the program performs as expected against these success criteria.

        ### Design
        I have made a flow chart to show the high level structure of the program I will be writing.
        <img src="assets/image/flowchart1.png" height="1000" style="display: block; margin-left: auto; margin-right: auto" />

        Alternately, I could have made the program ask a question then ask an answer, but I believe this solution to be
        better suited to the medium which I have chosen to deliver this program on: the web.

        ### Implementation
        I have chosen to write this program as a web application instead of a commandline application for several
        reasons:

        - It is easier for the students to access the program.
        - It is possible for multiple students to use the program at the same time.
        - I want to challenge myself.

        Web pages are served in a language called HTML which describes the content of the page and how to display it.
        HTML however is not a programming language because while it does provide a way of collecting user input, it
        does not provide any way of using logic. Because of this limitation, I will have to write a program which
        generates HTML and receives the user input from HTML.

        I have chosen to write the program which generated the HTML in a programming language called ruby because I am
        familiar with the language from previous projects and it has many tools already available for helping generate
        and serve webpages.

        In particular I will be using a web framework called "padrino" to help me write the web application. The padrino
        framework allows me to write in terms of models, views and controllers.

        - Models represent the core data format of an application, in our case 'quiz' and 'student'. They are usually
          saved in a database so they can be retrieved later.
        - Views take the data stored in a model and display it to the student.
        - Controllers take requests from the user and perform alterations to the model.

        Before I show you my code, I need to make some basic explanations about some of the non-obvious rules and syntax
        of the ruby programming language:

        - Sections starting with `do` and finishing with `end` or using curly braces are blocks. They specify their
          arguments like functions but use the syntax `|arg1, arg2|`
          <pre><code class="nohighlight">[ "one", "two" ].each do |element|
              puts element # Puts is ruby's "print" statement
          end
          </code></pre>
          This would produce the output
          <pre><code class="nohighlight">one
          two
          </code></pre>
        - Functions can have the parenteses around the arguments left off where
          <pre><code class="nohighlight">function(arg1, arg2)</code></pre>
          is the same as
          <pre><code class="nohighlight">function arg1, arg2</code></pre>
        - The last line of a function is the return value.
          <pre><code class="nohighlight">def name
              return firstname + " " + lastname
            end
          </code></pre>
          is the same as
          <pre><code class="nohighlight">def name
              firstname + " " + lastname
          end
          </code></pre>

        I also want to note that tasks 1 and 2 were implemented at the same time so the code is for **both** tasks.

        Models
        ------
        ### Question
        Represents a single question in the quiz.
        <p/>
    table
      tr
        td.markdown-body
          markdown:
            This model isn't saved in the database therefore it's a simple class instead of the next two models, which
            extend `Sequel::Model`.
        td
          pre
            code class="ruby"
              | class Question
      tr
        td.markdown-body
          markdown:
            This is a special method that processes creating a new object, you create new Questions using `Question.new`
            which calls the `initialise` method. I wanted to be able to initialise a question using a random value using
            `Question.new(min: 1, max: 10, operators: ["*", "-", "+"])` or using an existing value with
            `Question.new(1, "+", 2)`. In the first case arg1 would be a hash of options. It then calls `init_rand` with
            these options. If arg1 isn't a hash we use `init_pre` to try and initialise it using the given values.
        td
          pre
            code class="ruby"
              |     def initialize(arg1, arg2 = nil, arg3 = nil)
                        if arg1.class == Hash
                            init_rand(arg1)
                        else
                            init_pre(arg1, arg2, arg3)
                        end
                    end
      tr
        td.markdown-body
          markdown:
            This method initialises the question from the given options. First it merges the given options with the
            defaults, then it uses the `rand_from_options` method twice to select a random number for the left and right
            sides using the minimum and maximums specified in the options. It then takes a random sample from the
            available operators. After that it uses to `do_sum` method to generate the answer from the left side,
            operator and right side.
        td
          pre
            code class="ruby"
              |     def init_rand(options = {})
                        @options = { min: 1, max: 10, operators: [:*, :+, :-] }.merge options

                        @left = rand_from_options
                        @operator = @options[:operators].sample
                        @right = rand_from_options

                        @result = do_sum
                    end
      tr
        td.markdown-body
          markdown:
            Initialises the question using the predefined options given. Makes sure that the left and right sides are
            integer and that the operator is a symbol. Symbols are like strings but are used sometimes for performance
            reasons.
        td
          pre
            code class="ruby"
              |     def init_pre(left, operator, right)
                        @left = left.to_i
                        @operator = operator.to_sym
                        @right = right.to_i
                        @result = do_sum
                    end
      tr
        td.markdown-body
          markdown:
            `attr_reader` is a helper method from ruby which allows read-only access to a class variable. In this case I
            am allowing access to the `@left`, `@operator` `@right`, `@result` and `@options` variables.
        td
          pre
            code class="ruby"
              |     attr_reader :left
                    attr_reader :operator
                    attr_reader :right
                    attr_reader :result
                    attr_reader :options
      tr
        td.markdown-body
          markdown:
            Calls ruby's `rand` method with a range (syntax `0..5` for a rage from 0 to 5 inclusive) to return a random
            number using the minimum and maximum values in the options.
        td
          pre
            code class="ruby"
              |     def rand_from_options
                        rand(@options[:min]..@options[:max])
                    end
      tr
        td.markdown-body
          markdown:
            Defines the conversion of a question into a string, which is in the format `1 + 3`. The `\#{ ... }` syntax
            inside a quoted string is string interpolation where ruby substitutes the result of the code inside the
            brackets into the string.
        td
          pre
            code class="ruby"
              |     def to_s
                        "\#{left} \#{operator} \#{right}"
                    end
      tr
        td.markdown-body
          markdown:
            The `show` method is like `to_s` but shows the correct answer too.
        td
          pre
            code class="ruby"
              |     def show
                        "\#{to_s} = \#{result}"
                    end
      tr
        td.markdown-body
          markdown:
            Inspect method used for debugging. Like `show` but clearly shows that this is a `Question` object, not a
            string. Used for debugging.
        td
          pre
            code class="ruby"
              |     def inspect
                        "#&lt;Question \#{show}>"
                    end
      tr
        td.markdown-body
          markdown:
            Returns the correct answer for the question based on the `left` `right` and `operator` fields. It uses a
            case statement to select the sum to perform based on the operator.

            The method is marked as `private` meaning that it can only be used inside the class.
        td
          pre
            code class="ruby"
              |     def do_sum
                        case @operator
                            when :+
                                @left + @right
                            when :-
                                @left - @right
                            when :*
                                @left * @right
                            when :/
                                @left / @right
                        end
                    end

                    private :do_sum
      tr
        td.markdown-body
          markdown:
            Creates the specified number of questions with the given options. The method is defined as `self.get`
            because the method is called on the class, not the instance. This means that you do not need to call `new`
            before using this method.

            First it creates a range from 1 to the amount specified, then uses `collect` to collect a new question -
            based on the options given - for each number in the range.
        td
          pre
            code class="ruby"
              |     def self.get(amount, options = {})
                        (1..amount).collect { new(options) }
                    end
      tr
        td.markdown-body
          markdown:
            Another class method used to create a `Question` instance from a string.

            It first uses a case statement to decide what to do depending on if one of the operators is in the string
            given. It then splits the string into what is on either side of the operator, and assigns it to `val`. It
            also sets the `op` variable to the symbol of the operator. It then calls the constructor using the left side
            of the split, the operator and the right side of the split.
        td
          pre
            code class="ruby"
              |     def self.read(string)
                        case
                            when string.include?("+")
                                val = string.split("+")
                                op = :+
                            when string.include?("-")
                                val = string.split("-")
                                op = :-
                            when string.include?("*")
                                val = string.split("*")
                                op = :*
                            when string.include?("/")
                                val = string.split("/")
                                op = :/
                        end

                        new(val[0], op, val[1])
                    end
      tr
        td
        td
          pre
            code class="ruby"
              | end
    p
    .markdown-body
      markdown:
        ### Student
        Represents a student which has a class, firstname and lastname and a list of quizzes.
        <p/>
    table
      tr
        td.markdown-body
          markdown:
            Creates a sequel model called `Student`. Sequel is the library that adds models.
        td
          pre
            code class="ruby"
              | class Student < Sequel::Model
      tr
        td.markdown-body
          markdown:
            There is one student to many quizzes. This is a helper that defines things such as `student.quizzes` and
            `student.add_quiz`
        td
          pre
            code class="ruby"
              |     one_to_many :quizzes
      tr
        td.markdown-body
          markdown:
            The student's name is their `firstname` and `lastname` concatenated with a space.

        td
          pre
            code class="ruby"
              |     def name
                        firstname + " " + lastname
                    end
      tr
        td.markdown-body
          markdown:
            Returns an array of the quizzes which are finished.

        td
          pre
            code class="ruby"
              |     def completed_quizzes
                        quizzes.select(&:finished)
                    end
      tr
        td
          .markdown-body
            markdown:
              Finds the student's average score. Uses only completed quizzes because non-completed quizzes have no
              score. Reduce is a function which iterates through every completed quiz, setting `e` to the current
              element and `a` (accumulator) to the value returned from the previous element. The `0.0` specifies the
              first value for the accumulator. The last line is essentially a shortened version of this code:
          pre
            code class="ruby"
              | accumulator = 0.0
                completed_quizzes.each do |quiz|
                    accumulator = accumulator + quiz.score.to_i
                end
                return accumulator / quizzes.size
          .markdown-body
            markdown:
              This code adds all the scores together and divides them by the number of quizzes which we all know is how
              we get an average!
        td
          pre
            code class="ruby"
              |     def average_score
                        return if completed_quizzes.empty?

                        completed_quizzes.reduce(0.0) { |a, e| a + e.score.to_i } / quizzes.size
                    end
      tr
        td.markdown-body
          markdown:
            Takes the completed quiz with the highest `score` value and gets it's score.
        td
          pre
            code class="ruby"
              |     def highest_score
                        return if completed_quizzes.empty?

                        completed_quizzes.max_by(&:score).score
                    end
      tr
        td
        td
          pre
            code class="ruby"
              | end
    p
    .markdown-body
      markdown:
        ### Quiz
        Represents a quiz which has been completed by a student and has questions and answers.
        <p/>
    table
      tr
        td.markdown-body
          markdown:
            Loads the `json` library. JSON is a data format for saving and loading arrays, hashes and other data from
            strings. I use it for saving questions in the DB.
        td
          pre
            code class="ruby"
              | require "json"
      tr
        td.markdown-body
          markdown:
            Quiz model, same as before.
        td
          pre
            code class="ruby"
              | class Quiz < Sequel::Model
      tr
        td.markdown-body
          markdown:
            Like `one_to_many` from `Student` but adds methods such as `quiz.student`.
        td
          pre
            code class="ruby"
              |     many_to_one :student
      tr
        td.markdown-body
          markdown:
            This method is for retrieving the list of questions in this quiz. It overrides a default `question` method
            which would just return the raw data.

             The data is stored as a JSON hash with a key from 0 to 9 identifying the question, and a string in the
             format `8+5` which is the question.

            `@questions` is used as a cache variable so that it only has to query the database once per call. `super` is
            a special method which calls the default questions method to get the raw data in JSON format. It then checks
            if the raw data is empty, before using the JSON library to decode the data into a ruby hash of number to
            string. It then iterates through the array converting the strings to the `Question` object we saw
            previously. It then sets the `@question` variable so the decoding will be skipped and the cached value will
            be returned.
        td
          pre
            code class="ruby"
              |     def questions
                        if @questions.nil?
                            questions_json = super
                            return if questions_json.nil?

                            json = JSON.parse(questions_json)
                            json.each do |id, question|
                                json[id] = $Question.read(question)
                            end

                            @questions = json
                        end
                        @questions
                    end
      tr
        td.markdown-body
          markdown:
            This method sets the list of questions for this quiz. It essentially does the opposite of the previous
            statement. The method can either accept a `Hash` in the format described previously or an array where the
            numerical IDs are inserted automatically. It then sets the `@questions` cache variable to make `questions`
            return the right value and then uses `super` like in the last example to save the data to the DB.
        td
          pre
            code class="ruby"
              |     def questions=(questions)
                        case questions
                            when Hash
                                @questions = JSON.generate(questions)
                            when Array
                                # Hash of Array index to Array value
                                enumerated = Hash[[*questions.map.with_index]].invert
                                @questions = JSON.generate(enumerated)
                            else
                                fail "questions was neither a Hash or an Array"
                        end
                        super(@questions)
                    end
      tr
        td.markdown-body
          markdown:
            This is almost exactly the same as the first `questions` method except it is a map of the ID of the question
            to the answer given by the student. Another difference is that instead of turning the strings into Question
            object it uses `to_i` to ensure that the answers are numbers.
        td
          pre
            code class="ruby"
              |     def answers
                        if @answers.nil?
                            answers_json = super
                            return if answers_json.nil?

                            json = JSON.parse(answers_json)
                            json.each do |id, answer|
                                json[id] = answer.to_i
                            end

                            @answers = json
                        end
                        @answers
                    end
      tr
        td.markdown-body
          markdown:
            Sets the list of answers for this quiz. This method simply converts the ruby hash given directly into JSON
            unlike previous examples.
        td
          pre
            code class="ruby"
              |     def answers=(answers)
                        return unless answers.is_a? Hash
                        @answers = JSON.generate(answers)

                        super(@answers)
                    end
      tr
        td.markdown-body
          markdown:
            This method returns a map of questions to answers. It checks to see if either the questions or answers are
            present first, then creates an array of arrays using the `map` function. The `map` function is like `each`
            but it creates a list using the return values of the block. Since the block used in the `map` function
            returns a list with two elements, you end up with a list of lists, which can be used to construct a Hash.
            For example the array of arrays`[["key1", "value1"], ["key2", "value2]]` would be converted to the hash
            `{ "key1" => "value1", "key2" => "value2" }`
        td
          pre
            code class="ruby"
              |     def q_to_a_map
                        if @q_to_a_map.nil?
                            return if questions.nil?
                            return if answers.nil?

                            @q_to_a_map = Hash[
                                questions.map do |index, question|
                                    [question, answers[index]]
                                end
                            ]
                        end
                        @q_to_a_map
                    end
      tr
        td.markdown-body
          markdown:
            This method gets the score for the quiz. It uses the `q_to_a_map` and selects only question <> answer pairs
            where the question's result is the same as the student's answer. It then counts the pairs to get the score.
        td
          pre
            code class="ruby"
              |     def score
                        if @score.nil?
                            return if q_to_a_map.nil?

                            @score = q_to_a_map.select { |question, answer| question.result == answer }.count
                        end
                        @score
                    end
      tr
        td
        td
          pre
            code class="ruby"
              | end
    p
    .markdown-body
      markdown:
        Controllers
        -----------
        Controllers are the part of the application that receive HTTP requests from the user and edit the models
        accordingly. Each controller has a namespace such as `:quiz` which means that that controller takes requests
        under the path of `/quiz/`.

        ### Quiz
    table
      tr
        td.markdown-body
          markdown:
            Defines a new controller on the `ComputingArithmeticQuiz` app. The controller responds to requests to the
            `/quiz/` path.
        td
          pre
            code class="ruby"
              | ComputingArithmeticQuiz::App.controllers :quiz do
      tr
        td.markdown-body
          markdown:
            Defines what happens when you perform a HTTP `GET` request (the type of request performed by web browsers)
            to the index page (just `/quiz/`). It sets the page title to 'Quiz' then renders the `quiz/index` view.
        td
          pre
            code class="ruby"
              |     get :index do
                        @title = "Quiz"
                        render "quiz/index"
                    end
      tr
        td.markdown-body
          markdown:
            Once the user has filled out the HTML form on the index view, the browser sends the information to the
            `/quiz/start` URL which is handled by this method.

            First, it checks to see if the `firstname`, `lastname` or `class` parameters from the form submission are
            blank. If they are then it returns a `HTTP 400 Bad Request` error with an explanation. It also fails if the
            class name is `all` because that name is used later on to represent a view of all classes.

            Next, it uses the `Student.find_or_create` method to find a student with the given first name, last name
            and class, or create one of a matching student does not exist. It then creates a quiz with the student found
            and a list of 10 questions from the `Question.get()` method I explained before.

            Finally, it redirects the client to the show method with the given quiz id. This is so that it doesn't
            generate a new quiz every time a student refreshes their page.
        td
          pre
            code class="ruby"
              |     get :start do
                        halt 400, "First Name not given" if params[:firstname].blank?
                        halt 400, "Last Name not given" if params[:lastname].blank?
                        halt 400, "Class not given" if params[:class].blank?
                        halt 400, "Class `all` not allowed" if params[:class] == "all"

                        @student = Student.find_or_create firstname: params[:firstname],
                                                          lastname:  params[:lastname],
                                                          class:     params[:class]

                        @quiz = Quiz.create questions: $Question.get(10),
                                            student: @student

                        redirect to("/quiz/show/\#{@quiz.id}")
                    end
      tr
        td.markdown-body
          markdown:
            This method takes a parameter of a quiz id and shows the input page with the questions for students to fill
            out. First, it gets the quiz object with the given id. After that it checks that there was a quiz found and
            that the quiz isn't finished. It the sets the title and renders the quiz page.
        td
          pre
            code class="ruby"
              |     get :show, with: :id do
                        @quiz = Quiz[params[:id]]

                        halt 404, "This Quiz does not exist" if @quiz.nil?
                        halt 410, "This Quiz has already been completed" if @quiz.finished

                        @title = "Quiz (\#{@quiz.student.name})"
                        render "quiz/quiz"
                    end
      tr
        td.markdown-body
          markdown:
            This get method processes the results from the quiz.

            First, it gets the quiz object and does basic input validation like the previous method. Next, it reads the
            parameters and generates the answers hash. It does this by iterating through the list of questions, then
            finding the answer returned from the form with the same index as the question. If this answer is not found
            it throws an error. After setting the answers hash, it sets the quiz as finished and saves the changes. It
            then redirects the client to the results page for the quiz id, which shows them their results.
        td
          pre
            code class="ruby"
              |     get :finish do
                        @quiz = Quiz[params[:id]]

                        halt 404, "This Quiz does not exist" if @quiz.nil?
                        halt 410, "This Quiz has already been completed" if @quiz.finished

                        @quiz.answers = Hash[
                            @quiz.questions.map do |index, question|
                                halt 400, "Answer to \#{question} not given" if params[index].blank?
                                [index, params[index]]
                            end
                        ]

                        @quiz.finished = true

                        @quiz.save

                        redirect to("/quiz/results/\#{@quiz.id}")
                    end
      tr
        td.markdown-body
          markdown:
            This method shows the final results page of the quiz with the score and a review of which questions the user
            got right and wrong.

            This method starts off much the same as the previous two methods, except that it checks that the quiz is
            finished instead of _not_ finished. It then sets `@show_back` which is a variable used to configure the
            `quiz/results` view, because the same view is used in two places.
        td
          pre
            code class="ruby"
              |     get :results, with: :id do
                        @quiz = Quiz[params[:id]]

                        halt 404, "This Quiz does not exist" if @quiz.nil?
                        halt 400, "This Quiz has not yet been completed" unless @quiz.finished

                        @show_back = true

                        @title = "Results (\#{@quiz.student.name})"
                        render "quiz/results"
                    end
      tr
        td
        td
          pre
            code class="ruby"
              | end
    p
    .markdown-body
      markdown:
        Views
        -----
        Views use a language called `slim` which automates the generation of HTML. This allows me to write HTML in a
        clear, light syntax without end tags. It works like python in that everything indented deeper than a tag is
        "inside" that tag. Views are used using the `render` function that you see in my controller code.

        ### Layout Template
        The layout template is the basic template that all other templates inherit from. `== yield` is used to insert
        the content of the template being rendered. This means I don't have to repeat the same basic HTML code on each
        template.
        <p/>
    table width="100%"
      tr
        td.markdown-body
          markdown:
            This sets the `<!DOCTYPE html>` tag which must be at the top of every HTML page and opens the `<html>` tag
            which all HTML code must be contained in.
        td
          pre
            code class="slim"
              | doctype html
                html
      tr
        td.markdown-body
          markdown:
            The HTML `<head>` section contains metadata about the HTML page you are currently viewing such as the title
            to be displayed in the tab or window bar and the stylesheets and javascript the page requires.

            The `=` right after the `title` tag means that any text following is executed as ruby code. This particular
            bit of code sets the page title to be `Arithmetic Quiz - ` followed by the title set in the controller.

            Helper functions are then used to generate tags to include the css stylesheets and javascript code used on
            my pages. My pages use the bootstrap css framework to help with formatting and laying out the page because
            css layout from scratch takes a lot of work and it is better to use a simple pre-made solution.
        td
          pre
            code class="slim"
              |   head
                    title = "Arithmetic Quiz - " + @title

                    = stylesheet_link_tag "application", "bootstrap"
                    = javascript_include_tag "jquery", "bootstrap"
      tr
        td.markdown-body
          markdown:
            The `<body>` section of code is where the visible content of the page is. Lines starting with a `#` or `.`
            generate HTML `<div>` elements with their ID or class set, for example `#content` creates
            `<div id="content">`.

            The container and page-header classes are from the bootstrap CSS framework. The `container` class sets a
            maximum width for the page creating the central column of all the webpages. The `page-header` class creates
            a header for the page which contains the title set from the controller. It also yields to the individual
            page-specific view templates inside the container.
        td
          pre
            code class="slim"
              |   body
                    #content
                      .container
                        .page-header
                          h1 = @title
                        == yield
      tr
        td.markdown-body
          markdown:
            This creates the footer at the bottom of each page. `#content` is used to stop the page content being on top
            of the footer.
        td
          pre
            code class="slim"
              |     footer
                      .container
                        p.text-muted.text-center
                          | Project made by Chris Hobbs for the Computing GCSE "Arithmetic Quiz" task
    p
    .markdown-body
      markdown:
        ### Index
        This view is rendered at the beginning of the quiz and asks the student for their firstname, lastname and class.
        <p/>
    table width="100%"
      tr
        td.markdown-body
          markdown:
            A lead paragraph explaining the quiz.
        td
          pre
            code class="slim"
              | p.lead
                  | Test your maths skills with this arithmetic test!
      tr
        td.markdown-body
          markdown:
            A HTML form to submit the data back to the controller.

            The form action is the `/quiz/start/` url which is in the quiz controller. The form contains several
            form-groups (from bootstrap). Each form group has a label 2/12ths wide (`.col-sm-2`) and a input box
            10/12ths wide (`.col-sm-10`). The input boxes are of type text, and the name attribute controls what name it
            is accessible by in the `params` hash in the controller. Each input box also has a `required` attribute
            which is new in HTML5. This means that the browser will prompt the student if they miss out a box.

            There is also a button which is offset by 2/12ths to align it with the input boxes. The type is "submit"
            which means that it submits the form when clicked.
        td
          pre
            code class="slim"
              | form.form-horizontal role="form" action="/quiz/start" method="GET"
                  .form-group
                    label.col-sm-2.control-label for="firstname" First Name
                    .col-sm-10
                      input.form-control#firstname type="text" name="firstname" required=""

                  .form-group
                    label.col-sm-2.control-label for="lastname" Last Name
                    .col-sm-10
                      input.form-control#lastname type="text" name="lastname" required=""

                  .form-group
                    label.col-sm-2.control-label for="class" Class
                    .col-sm-10
                      input.form-control#class type="text" name="class" required=""

                  .form-group
                    .col-sm-10.col-sm-offset-2
                      button.btn.btn-primary type="submit" Start Test
    p
    .markdown-body
      markdown:
        Here is a screenshot of the rendered view:
        <img src="assets/image/index_view_screenshot.png"/>

        ### Quiz
        This view renders the quiz page which shows the student the questions and a form for the answers.
        <p/>
    table width="100%"
      tr
        td.markdown-body
          markdown:
            A lead paragraph explaining the quiz.
        td
          pre
            code class="slim"
              | p.lead
                  | Test your maths skills with this arithmetic test!
      tr
        td.markdown-body
          markdown:
            The form used for submitting the answers to the quiz. This form is quite similar to the form used on the
            index form except that it it submits to a different URL.

            Lines starting with `-` are executed as ruby code. This can lead to interesting code such as the
            `@quiz.questions.each do |index, question|` code which adds a form group for every question in the quiz. The
            label for the input box is set to be the `question.to_s` and the index is used as the input name so that we
            can use `params[index]` in the controller. Each input box is required and the type is set to number so that
            the user can only input numbers.

            We also set a hidden input to the quiz id so that we can find the quiz in the database again when we submit.
        td
          pre
            code class="slim"
              | form.form-horizontal role="form" action="/quiz/finish" method="GET"
                  - @quiz.questions.each do |index, question|
                    .form-group id="question_\#{index}"
                      label.col-sm-2.control-label for="question_\#{index}_input" = question.to_s
                      .col-sm-10
                        input.form-control id="question_\#{index}_input" type="number" name="\#{index}" required=""

                  input type="hidden" name="id" value="\#{@quiz.id}"

                  .form-group
                    .col-sm-10.col-sm-offset-2
                      button.btn.btn-primary type="submit" Submit Test
    p
    .markdown-body
      markdown:
        Here is a screenshot of the rendered view:
        <img src="assets/image/quiz_view_screenshot.png"/>

        ### Results
        Renders the results of the quiz
        <p/>
    table width="100%"
      tr
        td.markdown-body
          markdown:
            Shows the score to the student
        td
          pre
            code class="slim"
              | h2 You scored \#{@quiz.score}/10!
      tr
        td.markdown-body
          markdown:
            For each quiz to answer pair, it shows either a `success` or `danger` panel, depending on whether the
            student got the question correct. If it is correct it shows `\#{question} = \#{answer}` and the ok
            glyphicon. If it is wrong, it shows `\#{question} != \#{answer}` and the remove glyphicon. It also shows the
            correct answer in the panel body.
        td
          pre
            code class="slim"
              | p
                  - @quiz.q_to_a_map.each do |question, answer|
                    - if question.result == answer
                      .panel.panel-success
                        .panel-heading
                          h3.panel-title.row
                            .col-xs-8.text-left \#{question} = \#{answer}
                            .col-xs-4.text-right
                              span.glyphicon.glyphicon-ok
                    - else
                      .panel.panel-danger
                        .panel-heading
                          h3.panel-title.row
                            .col-xs-8.text-left \#{question} != \#{answer}
                            .col-xs-4.text-right
                              span.glyphicon.glyphicon-remove
                        .panel-body
                          = question.show
      tr
        td.markdown-body
          markdown:
            It also shows a right-justified "Start Again" button which takes you back to the quiz index page. `url_for`
            is a helper that takes a controller name and a path name and works out the URL to it.
        td
          pre
            code class="slim"
              | - if @show_back
                  a.btn.btn-primary.pull-right#start-again href=url_for(:quiz, :index) Start Again
    p
    .markdown-body
      markdown:
        Here is a screenshot of the rendered view:
        <img src="assets/image/results_view_screenshot.png"/>

        Testing
        -------
        The above views, controllers and models come together to complete tasks 1 and 2. Lets check this against the
        success criteria:

        - It must be able to generate a quiz containing 10 questions. In order to properly test the students in
          consecutive quizzes, the program should generate random questions instead of using a preset 10 questions every
          time.
          - The `Question` class represents one question and can be instantiated with random values. There is also a
            `get` method to get a number (in this case 10) random questions.
        - The system must be able to ask the students name and class.
          - The index view contains a form to ask the students first name, last name and class.
        - It must then show these questions to the student in a human-readable format so that the students can
          understand what the program is asking them to solve.
          - The quiz view shows the questions in a simple format that students can understand.
        - The student should be able to enter an answer to the question.
          - The quiz view has a form that allows the student to enter answers to the questions.
        - The program should give a score at the end of the quiz.
          - The results view shows the score and question-by-question results to the student.
        - The program should also save the results of the quiz, and the name and class of the student.
          - Each student and quiz is saved in a sqlite database and can be retrieved later.

        Task 3
        ======
        > ##### Task 3
        > The teacher wants to use the results from students taking these quizzes to log their performance. The system
        > should store the last three scores for each student. The teacher would like to be able to output the results
        > of the quiz for a particular class, sorted:

        > - in alphabetical order with each student's highest score for the tests
        > - by the highest score, highest to lowest
        > - by the average score, highest to lowest.

        ### Success Criteria:
        - View a list of classes which links to a list of students in each class.
        - View a list of students per-class with highest and average scores. The list should be sortable alphabetically
          or by highest or average score.
        - View a list of quizzes per-student and be able to view each quiz.

        ### View Controller
    table
      tr
        td.markdown-body
          markdown:
            The view controller. Used by teachers to view the students results.
        td
          pre
            code class="ruby"
              | ComputingArithmeticQuiz::App.controllers :view do
      tr
        td.markdown-body
          markdown:
            Shows a list of classes with links to the view of students in a class.

            The first lines creates a list of classes by selecting only distinct entries in the class column from the
            students table then mapping the student entries to their class. It's convoluted and I would rather have used
            plain SQL but for some reason that I can't remember it wasn't working... Whatever, it works!
        td
          pre
            code class="ruby"
              |     get :index do
                        @classes = Student.select(:class).distinct.map { |s| s[:class] }

                        @title = "Classes"
                        render "view/index"
                    end
      tr
        td.markdown-body
          markdown:
            A simple method to redirect links without a sort type to the alphabetical sort type.
        td
          pre
            code class="ruby"
              |     get :class, with: :class do
                        redirect to("/view/class/\#{params[:class]}/sort/alphabetical")
                    end
      tr
        td.markdown-body
          markdown:
            Shows a list of students in each class, or all students if the class is "all".

            After filtering by class (if needed), it switches by the sort type selected. If the type is alphabetical it
            sorts by the last name. If the type is highest_score then it sorts by the highest score then reverses the
            ordering to put the highest value first. A similar thing is done for the average score. If there is an
            invalid sort type, it returns 404.
        td
          pre
            code class="ruby"
              |     get "/class/:class/sort/:sort" do
                        if params[:class] == "all"
                            @students = Student.all
                        else
                            @students = Student.filter(class: params[:class]).all
                        end

                        case params[:sort]
                            when "alphabetical"
                                @students.sort_by!(&:lastname)
                            when "highest_score"
                                @students.sort_by! { |s| s.highest_score.to_f }
                                @students.reverse!
                            when "average_score"
                                @students.sort_by! { |s| s.average_score.to_f }
                                @students.reverse!
                            else
                                pass
                        end

                        @title = "Class: \#{params[:class]}"
                        render "view/class"
                    end
      tr
        td.markdown-body
          markdown:
            Shows all quizzes by a particular student. First it selects the student with the given ID, or returns 404 if
            the student doesn't exist.
        td
          pre
            code class="ruby"
              |     get :student, with: :id do
                        @student = Student[params[:id]]
                        halt 404, "This Student does not exist" if @student.nil?

                        @title = "Student: \#{@student.name}"
                        render "view/student"
                    end
      tr
        td.markdown-body
          markdown:
            #
        td
          pre
            code class="ruby"
              |     get :test, with: :id do
                        @quiz = Quiz[params[:id]]

                        halt 404, "This Quiz does not exist" if @quiz.nil?
                        halt 400, "This Quiz has not yet been completed" unless @quiz.finished

                        @show_back = false

                        @title = "Results"
                        render "quiz/results"
                    end
      tr
        td.markdown-body
          markdown:
            #
        td
          pre
            code class="ruby"
              | end
